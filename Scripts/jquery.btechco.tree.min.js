var c = null, d = !1, g = jQuery; $treedatatype = { p: 1, A: 2 }; $treedataformat = { z: 1, o: 2 }; var h = { h: c, url: c, async: d, dataset: c, d: $treedatatype.p, l: $treedataformat.o, c: "ui-icon-folder-collapsed", f: "ui-icon-folder-open", s: "ui-icon-document", k: d, m: "ui-state-highlight", q: "ui-icon-plusthick", u: "ui-icon-minusthick", v: d, w: d, t: "Are you sure you want to remove this node?" }, p = h;
g.D.C = function (f) {
    function j(a, b) { for (var e = 0; e < a.length; e++) if (a[e].id == b.g) { 0 == a[e].a.length && (a[e].a = []); a[e].a.push(b); break } else a[e].a instanceof Object && j(a[e].a, b) } function l(a) {
        b = 0 == b.length ? b + "<ul style='list-style-type:none;'>" : b + "<ul style='list-style-type:none; display:none;'>"; g(a).e(function () {
            var a = 20; b += "<li nodeid='" + this.id + "'>"; this.a != c && 0 < this.a.length ? (b += "<span class='ui-icon ", b = p.k ? b + p.f : b + p.c, b += "' data-action='nav_items' style='position:absolute; margin-top:1px;'></span>") :
            b += "<span class='ui-icon " + p.s + "' data-action='nav_item' style='position:absolute; margin-top:1px;'></span>"; p.v && (a += 20, b += "<span class='ui-icon " + p.q + "' data-action='add' style='position:absolute;  margin-top:1px;margin-left:20px;'></span>"); p.w && (a += 20, b += "<span class='ui-icon " + p.u + "' data-action='remove' style='position:absolute; margin-top:1px;margin-left:40px;'></span>"); this.href && (b += "<a href='" + this.href + "'>"); b += "<span style='margin-left:" + a + "px;' data-action='text'>" + this.name + "</span>";
            this.href && (b += "</a>"); b += "</li>"; this.a != c && 0 < this.a.length && l(this.a)
        }); b += "</ul>"
    } function m(a) { g(a).parent().next("ul").toggle() } function n(a) { g(a).r(p.f) ? (g(a).n(p.f), g(a).j(p.c)) : g(a).r(p.c) && (g(a).n(p.c), g(a).j(p.f)) } function k(a, b) { g("#" + p.h + " ul li span[data-action='text']").n(p.m); b && g(a).parent().find("span[data-action='text']").j(p.m) } function q(a, b) { g(a).e(function () { if (this.id == b) return a.splice(this, 1), d; 0 < this.a.length && l(this.a) }) } p = g.extend({}, h, f); var e = [], b = ""; if (p.url != c && 0 < p.url.length) {
        f =
        ""; switch (p.d) { case 1: f = "json"; break; case 2: f = "xml" } console.log(p.d); console.log(p.d.G()); g.B({ type: "GET", async: p.async, url: p.url, dataType: f, F: function (a) { p.dataset = a }, error: function (a, b, e) { console.log("Ajax Error"); console.log(a.status); console.log(e) } })
    } switch (p.d) {
        case 1: switch (p.l) { case 1: g(p.dataset[0].root).e(function () { var a = { id: this.id, name: this.name, g: this.g, href: this.href, a: [] }; 0 == e.length ? e.push(a) : j(e, a) }); break; case 2: e = p.dataset[0].root } break; case 2: switch (p.l) {
            case 1: g(p.dataset).find("node").e(function () {
                var a =
                { id: this.id, name: g(this).b("name"), g: g(this).b("parentId"), href: g(this).b("href"), a: [] }; 0 == e.length ? e.push(a) : j(e, a)
            }); break; case 2: g(p.dataset).find("node").e(function () { var a = { id: g(this).b("id"), name: g(this).b("name"), g: g(this).parent().b("id") == c ? 0 : g(this).parent().b("id"), href: g(this).b("href"), a: [] }; 0 == e.length ? e.push(a) : j(e, a) })
        }
    } l(e); g("#" + p.h).append(b); f = g("#" + p.h + "> ul > li > span:nth-child(1)"); n(f); m(f); p.k && (n(f), m(f)); g("li").i("span[data-action='nav_items']", "click", function () {
        n(this);
        m(this)
    }); g("li").i("span[data-action='text']", "click", function () { k(this, !0) }); g("li").i("span[data-action='add']", "click", function () { k(this, !0) }); g("li").i("span[data-action='remove']", "click", function () { console.log(e); k(this, !0); if (confirm(p.t)) { var a = g(this).parent().b("nodeid"); q.call(e, a) } else k(this, d); console.log(e) })
};
